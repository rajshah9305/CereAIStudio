# Docker Compose for CereStudioAI Enhanced
# Author: Raj Shah

version: '3.8'

services:
  # Main application
  cerestudio-app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:80"
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - FLASK_ENV=production
      - REACT_APP_API_URL=http://localhost:5000
      - REACT_APP_ANALYTICS_API=http://localhost:5000/api/analytics
    volumes:
      - ./data:/app/data
      - ./logs:/var/log/cerestudio
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - cerestudio-network

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes
    networks:
      - cerestudio-network

  # PostgreSQL for production database (optional)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=cerestudio
      - POSTGRES_USER=cerestudio
      - POSTGRES_PASSWORD=cerestudio_secure_password
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - cerestudio-network

  # Nginx reverse proxy (for production)
  nginx-proxy:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - cerestudio-app
    restart: unless-stopped
    networks:
      - cerestudio-network

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - cerestudio-network

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - cerestudio-network

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:

networks:
  cerestudio-network:
    driver: bridge

# Development override
# Use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
---
# docker-compose.dev.yml
version: '3.8'

services:
  cerestudio-app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    environment:
      - NODE_ENV=development
      - FLASK_ENV=development
      - FLASK_DEBUG=1
    volumes:
      - .:/app
      - /app/node_modules
      - /app/frontend/node_modules
    ports:
      - "3000:3000"
      - "5000:5000"
      - "5173:5173"  # Vite dev server

  # Development database (SQLite)
  # No external database needed for development

